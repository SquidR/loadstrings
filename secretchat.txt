-- Secret Chat (centered + draggable fix + adaptive size)
local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer

-- CONFIG
local SEED = 2031
local ALPHABET = "abcdefghijklmnopqrstuvwxyz"

-- Build deterministic shuffled alphabet
local rng = Random.new(SEED)
local letters = {}
for i = 1, #ALPHABET do
    letters[i] = ALPHABET:sub(i, i)
end
for i = #letters, 2, -1 do
    local j = rng:NextInteger(1, i)
    letters[i], letters[j] = letters[j], letters[i]
end

-- Build encode / decode maps (preserve case)
local encodeMap, decodeMap = {}, {}
for i = 1, #ALPHABET do
    local p = ALPHABET:sub(i, i)
    local c = letters[i]
    encodeMap[p] = c
    encodeMap[p:upper()] = c:upper()
    decodeMap[c] = p
    decodeMap[c:upper()] = p:upper()
end

local function encode(text)
    return text:gsub(".", function(ch)
        return encodeMap[ch] or ch
    end)
end

local function decode(text)
    return text:gsub(".", function(ch)
        return decodeMap[ch] or ch
    end)
end

-- Utility clamp
local function clamp(v, a, b) return math.max(a, math.min(b, v)) end

-- CREATE GUI (CoreGui so executors can show it)
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SecretChatGui"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.Parent = game:GetService("CoreGui")

-- Main frame: centered with AnchorPoint 0.5,0.5
local frame = Instance.new("Frame")
frame.Name = "MainFrame"
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.Position = UDim2.new(0.5, 0, 0.5, 0) -- center of screen
frame.Size = UDim2.new(0.42, 0, 0.6, 0) -- will be recalculated
frame.BackgroundColor3 = Color3.fromRGB(23, 23, 23)
frame.BorderSizePixel = 0
frame.Parent = screenGui
frame.ClipsDescendants = true
frame.Active = true

-- Titlebar + close
local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 34)
titleBar.Position = UDim2.new(0, 0, 0, 0)
titleBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
titleBar.BorderSizePixel = 0
titleBar.Parent = frame
titleBar.Active = true -- allow input

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -40, 1, 0)
title.Position = UDim2.new(0, 6, 0, 0)
title.BackgroundTransparency = 1
title.Text = "Secret Chat"
title.TextSize = 18
title.Font = Enum.Font.SourceSansBold
title.TextColor3 = Color3.new(1, 1, 1)
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = titleBar

local closeBtn = Instance.new("TextButton")
closeBtn.Size = UDim2.new(0, 34, 1, 0)
closeBtn.Position = UDim2.new(1, -36, 0, 0)
closeBtn.Text = "X"
closeBtn.Font = Enum.Font.SourceSansBold
closeBtn.TextSize = 18
closeBtn.BackgroundTransparency = 1
closeBtn.TextColor3 = Color3.fromRGB(255, 100, 100)
closeBtn.Parent = titleBar

closeBtn.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

-- Scroll area for decoded messages
local scroll = Instance.new("ScrollingFrame")
scroll.Name = "MessageScroll"
scroll.Position = UDim2.new(0, 8, 0, 42)
scroll.Size = UDim2.new(1, -16, 1, -122)
scroll.CanvasSize = UDim2.new(0, 0, 0, 0)
scroll.ScrollBarThickness = 8
scroll.BackgroundTransparency = 1
scroll.BorderSizePixel = 0
scroll.Parent = frame

local uiLayout = Instance.new("UIListLayout")
uiLayout.SortOrder = Enum.SortOrder.LayoutOrder
uiLayout.Padding = UDim.new(0, 6)
uiLayout.Parent = scroll

-- Input box + send button
local inputBox = Instance.new("TextBox")
inputBox.Name = "InputBox"
inputBox.Size = UDim2.new(1, -92, 0, 36)
inputBox.Position = UDim2.new(0, 8, 1, -62)
inputBox.PlaceholderText = "Type secret message..."
inputBox.Text = ""
inputBox.TextColor3 = Color3.new(1,1,1)
inputBox.BackgroundColor3 = Color3.fromRGB(36,36,36)
inputBox.BorderSizePixel = 0
inputBox.ClipsDescendants = true
inputBox.ClearTextOnFocus = false
inputBox.Font = Enum.Font.SourceSans
inputBox.TextSize = 18
inputBox.Parent = frame

local sendBtn = Instance.new("TextButton")
sendBtn.Size = UDim2.new(0, 72, 0, 36)
sendBtn.Position = UDim2.new(1, -82, 1, -62)
sendBtn.Text = "Send"
sendBtn.Font = Enum.Font.SourceSansBold
sendBtn.TextSize = 18
sendBtn.BackgroundColor3 = Color3.fromRGB(50,50,50)
sendBtn.BorderSizePixel = 0
sendBtn.Parent = frame

-- helper to add a decoded message line
local function addMessage(sender, decodedText)
    local lbl = Instance.new("TextLabel")
    lbl.Size = UDim2.new(1, -8, 0, 20)
    lbl.BackgroundTransparency = 1
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    lbl.Font = Enum.Font.SourceSans
    lbl.TextSize = 16
    lbl.TextColor3 = Color3.new(1,1,1)
    lbl.Text = ("%s: %s"):format(sender, decodedText)
    lbl.Parent = scroll

    -- update canvas and auto-scroll (let layout compute)
    RunService.Heartbeat:Wait()
    scroll.CanvasSize = UDim2.new(0, 0, 0, uiLayout.AbsoluteContentSize.Y + 8)
    scroll.CanvasPosition = Vector2.new(0, math.max(0, uiLayout.AbsoluteContentSize.Y - scroll.AbsoluteWindowSize.Y))
end

-- Listen for all incoming chat messages and decode them
local function getChannel()
    local chan = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
    if not chan then
        TextChatService.TextChannels.ChildAdded:Wait()
        chan = TextChatService.TextChannels:WaitForChild("RBXGeneral")
    end
    return chan
end

local channel = getChannel()
channel.MessageReceived:Connect(function(message)
    local sender = message.TextSource and message.TextSource.Name or "System"
    local decodedText = decode(message.Text)
    addMessage(sender, decodedText)
end)

-- Send: encode then post to real chat (TextChatService)
local function sendEncoded(text)
    local encoded = encode(text)
    local ok, err = pcall(function()
        channel:SendAsync(encoded)
    end)
    if not ok then
        warn("Failed to send encoded message:", err)
    end
    -- fallback if your own message isn't received by MessageReceived for some reason:
    -- addMessage(LocalPlayer.Name, text)
end

sendBtn.MouseButton1Click:Connect(function()
    if inputBox.Text ~= "" then
        sendEncoded(inputBox.Text)
        inputBox.Text = ""
    end
end)

inputBox.FocusLost:Connect(function(enterPressed)
    if enterPressed and inputBox.Text ~= "" then
        sendEncoded(inputBox.Text)
        inputBox.Text = ""
    end
end)

-- ===== Adaptive sizing =====
local function updateSize()
    local vs = workspace.CurrentCamera and workspace.CurrentCamera.ViewportSize or Vector2.new(1366,768)
    local touch = UserInputService.TouchEnabled

    -- % of screen, with different ratios for touch vs desktop
    local ratioW = touch and 0.9 or 0.42
    local ratioH = touch and 0.75 or 0.6

    local w = clamp(math.floor(vs.X * ratioW), 320, math.max(320, vs.X - 40))
    local h = clamp(math.floor(vs.Y * ratioH), 220, math.max(220, vs.Y - 80))

    frame.Size = UDim2.new(0, w, 0, h)
    frame.Position = UDim2.new(0.5, 0, 0.5, 0)
end

updateSize()
if workspace.CurrentCamera then
    workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(updateSize)
end
UserInputService:GetPropertyChangedSignal("TouchEnabled"):Connect(updateSize)

-- ===== Draggable (titleBar) - works with mouse & touch =====
titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        -- begin drag
        local startInputPos = input.Position
        local startFrameTL = Vector2.new(frame.AbsolutePosition.X, frame.AbsolutePosition.Y)
        local currentDrag = input

        local changedConn
        local function onMove(changed)
            if changed ~= currentDrag then return end
            local delta = changed.Position - startInputPos
            local newTopLeft = startFrameTL + delta

            -- clamp to viewport
            local vs = workspace.CurrentCamera and workspace.CurrentCamera.ViewportSize or Vector2.new(1366,768)
            local maxX = math.max(0, vs.X - frame.AbsoluteSize.X)
            local maxY = math.max(0, vs.Y - frame.AbsoluteSize.Y)
            local clampedX = clamp(newTopLeft.X, 0, maxX)
            local clampedY = clamp(newTopLeft.Y, 0, maxY)

            local newCenterX = clampedX + frame.AbsoluteSize.X * 0.5
            local newCenterY = clampedY + frame.AbsoluteSize.Y * 0.5

            frame.Position = UDim2.new(0, newCenterX, 0, newCenterY)
        end

        changedConn = UserInputService.InputChanged:Connect(onMove)

        -- stop when input ends
        local endedConn
        endedConn = UserInputService.InputEnded:Connect(function(ended)
            if ended == currentDrag then
                if changedConn then changedConn:Disconnect() end
                if endedConn then endedConn:Disconnect() end
            end
        end)
    end
end)
