-- Secret Chat with Minimize/Restore (executor LocalScript)
local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer

-- CONFIG
local SEED = 2031
local ALPHABET = "abcdefghijklmnopqrstuvwxyz"

-- Build deterministic shuffled alphabet
local rng = Random.new(SEED)
local letters = {}
for i = 1, #ALPHABET do letters[i] = ALPHABET:sub(i,i) end
for i = #letters, 2, -1 do
    local j = rng:NextInteger(1, i)
    letters[i], letters[j] = letters[j], letters[i]
end

-- Build encode / decode maps (preserve case)
local encodeMap, decodeMap = {}, {}
for i = 1, #ALPHABET do
    local p = ALPHABET:sub(i,i)
    local c = letters[i]
    encodeMap[p] = c; encodeMap[p:upper()] = c:upper()
    decodeMap[c] = p; decodeMap[c:upper()] = p:upper()
end

local function encode(text) return text:gsub(".", function(ch) return encodeMap[ch] or ch end) end
local function decode(text) return text:gsub(".", function(ch) return decodeMap[ch] or ch end) end

-- Utility clamp
local function clamp(v,a,b) return math.max(a, math.min(b, v)) end

-- CREATE GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SecretChatGui"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.Parent = game:GetService("CoreGui")

-- Main frame centered, anchor at center
local frame = Instance.new("Frame")
frame.Name = "MainFrame"
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.Position = UDim2.new(0.5,0,0.5,0)
frame.Size = UDim2.new(0.5,0,0.55,0)
frame.BackgroundColor3 = Color3.fromRGB(23,23,23)
frame.BorderSizePixel = 0
frame.Parent = screenGui
frame.ClipsDescendants = true
frame.Active = true

-- Title bar (contains title, minimize, close)
local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1,0,0,34)
titleBar.Position = UDim2.new(0,0,0,0)
titleBar.BackgroundColor3 = Color3.fromRGB(30,30,30)
titleBar.BorderSizePixel = 0
titleBar.Parent = frame

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -84, 1, 0)
title.Position = UDim2.new(0,6,0,0)
title.BackgroundTransparency = 1
title.Text = "Secret Chat"
title.TextSize = 18
title.Font = Enum.Font.SourceSansBold
title.TextColor3 = Color3.new(1,1,1)
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = titleBar

local minimizeBtn = Instance.new("TextButton")
minimizeBtn.Size = UDim2.new(0,34,1,0)
minimizeBtn.Position = UDim2.new(1, -84, 0, 0)
minimizeBtn.Text = "â€”"
minimizeBtn.Font = Enum.Font.SourceSansBold
minimizeBtn.TextSize = 22
minimizeBtn.BackgroundTransparency = 1
minimizeBtn.TextColor3 = Color3.fromRGB(200,200,200)
minimizeBtn.Parent = titleBar

local closeBtn = Instance.new("TextButton")
closeBtn.Size = UDim2.new(0,34,1,0)
closeBtn.Position = UDim2.new(1,-44,0,0)
closeBtn.Text = "X"
closeBtn.Font = Enum.Font.SourceSansBold
closeBtn.TextSize = 18
closeBtn.BackgroundTransparency = 1
closeBtn.TextColor3 = Color3.fromRGB(255,100,100)
closeBtn.Parent = titleBar

closeBtn.MouseButton1Click:Connect(function() screenGui:Destroy() end)

-- Scroll area for decoded messages
local scroll = Instance.new("ScrollingFrame")
scroll.Name = "MessageScroll"
scroll.Position = UDim2.new(0,8,0,42)
scroll.Size = UDim2.new(1, -16, 1, -122)
scroll.CanvasSize = UDim2.new(0,0,0,0)
scroll.ScrollBarThickness = 8
scroll.BackgroundTransparency = 1
scroll.BorderSizePixel = 0
scroll.Parent = frame

local uiLayout = Instance.new("UIListLayout")
uiLayout.SortOrder = Enum.SortOrder.LayoutOrder
uiLayout.Padding = UDim.new(0,6)
uiLayout.Parent = scroll

-- Input + send
local inputBox = Instance.new("TextBox")
inputBox.Name = "InputBox"
inputBox.Size = UDim2.new(1, -92, 0, 36)
inputBox.Position = UDim2.new(0,8,1,-62)
inputBox.PlaceholderText = "Type secret message..."
inputBox.Text = ""
inputBox.TextColor3 = Color3.new(1,1,1)
inputBox.BackgroundColor3 = Color3.fromRGB(36,36,36)
inputBox.BorderSizePixel = 0
inputBox.ClearTextOnFocus = false
inputBox.Font = Enum.Font.SourceSans
inputBox.TextSize = 18
inputBox.Parent = frame

local sendBtn = Instance.new("TextButton")
sendBtn.Size = UDim2.new(0,72,0,36)
sendBtn.Position = UDim2.new(1,-82,1,-62)
sendBtn.Text = "Send"
sendBtn.Font = Enum.Font.SourceSansBold
sendBtn.TextSize = 18
sendBtn.BackgroundColor3 = Color3.fromRGB(50,50,50)
sendBtn.BorderSizePixel = 0
sendBtn.Parent = frame

-- helper to add a decoded message line
local function addMessage(sender, decodedText)
    local lbl = Instance.new("TextLabel")
    lbl.Size = UDim2.new(1, -8, 0, 20)
    lbl.BackgroundTransparency = 1
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    lbl.Font = Enum.Font.SourceSans
    lbl.TextSize = 16
    lbl.TextColor3 = Color3.new(1,1,1)
    lbl.Text = ("%s: %s"):format(sender, decodedText)
    lbl.Parent = scroll

    -- let layout compute then auto-scroll
    RunService.Heartbeat:Wait()
    scroll.CanvasSize = UDim2.new(0, 0, 0, uiLayout.AbsoluteContentSize.Y + 8)
    scroll.CanvasPosition = Vector2.new(0, math.max(0, uiLayout.AbsoluteContentSize.Y - scroll.AbsoluteWindowSize.Y))
end

-- Robust channel getter
local function getChannel()
    local chan = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
    if not chan then
        TextChatService.TextChannels.ChildAdded:Wait()
        chan = TextChatService.TextChannels:WaitForChild("RBXGeneral")
    end
    return chan
end

local channel = getChannel()
channel.MessageReceived:Connect(function(message)
    local sender = message.TextSource and message.TextSource.Name or "System"
    local decodedText = decode(message.Text)
    addMessage(sender, decodedText)
end)

-- sendEncoded: try multiple send methods; always show decoded local message as fallback
local function sendEncoded(text)
    local encoded = encode(text)
    local sent = false

    -- Try TextChatService SendAsync
    local ok, err = pcall(function() channel:SendAsync(encoded) end)
    if ok then sent = true end

    -- fallback to old chat event if present
    if not sent then
        local success, e = pcall(function()
            local ev = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
            if ev and ev:FindFirstChild("SayMessageRequest") then
                ev.SayMessageRequest:FireServer(encoded, "All")
                return true
            end
            if game.ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents") and game.ReplicatedStorage.DefaultChatSystemChatEvents:FindFirstChild("SayMessageRequest") then
                game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(encoded, "All")
                return true
            end
        end)
        if success then sent = true end
    end

    if not sent then
        warn("Failed to send encoded message via known channels. Message will still be shown locally.")
    end

    -- ALWAYS add the decoded message locally so the sender sees it immediately
    addMessage(LocalPlayer.Name, text)
end

sendBtn.MouseButton1Click:Connect(function()
    if inputBox.Text ~= "" then
        sendEncoded(inputBox.Text)
        inputBox.Text = ""
    end
end)
inputBox.FocusLost:Connect(function(enterPressed)
    if enterPressed and inputBox.Text ~= "" then
        sendEncoded(inputBox.Text)
        inputBox.Text = ""
    end
end)

-- ===== Adaptive sizing =====
local function updateSize()
    local vs = workspace.CurrentCamera and workspace.CurrentCamera.ViewportSize or Vector2.new(1366,768)
    local touch = UserInputService.TouchEnabled

    local ratioW = touch and 0.9 or 0.5
    local ratioH = touch and 0.65 or 0.55

    local minW, minH = 260, 180
    local maxW, maxH = vs.X - 40, vs.Y - 80

    local w = clamp(math.floor(vs.X * ratioW), minW, maxW)
    local h = clamp(math.floor(vs.Y * ratioH), minH, maxH)

    frame.Size = UDim2.new(0, w, 0, h)
    frame.Position = UDim2.new(0.5, 0, 0.5, 0)
end

updateSize()
if workspace.CurrentCamera then
    workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(updateSize)
end
UserInputService:GetPropertyChangedSignal("TouchEnabled"):Connect(updateSize)

-- ===== Minimize / Restore logic =====
local minimized = false
local saved = {Position = frame.Position, Size = frame.Size}

local function minimize()
    if minimized then return end
    saved.Position = frame.Position
    saved.Size = frame.Size

    -- shrink to compact bar
    frame.Size = UDim2.new(0, 180, 0, 40)
    frame.Position = UDim2.new(0.02, 0, 0.5, 0) -- left side small bar
    -- hide content
    scroll.Visible = false
    inputBox.Visible = false
    sendBtn.Visible = false
    title.Text = "Secret Chat (min)"
    minimized = true
end

local function restore()
    if not minimized then return end
    -- restore previous
    frame.Position = saved.Position or UDim2.new(0.5,0,0.5,0)
    frame.Size = saved.Size or UDim2.new(0.5,0,0.55,0)
    scroll.Visible = true
    inputBox.Visible = true
    sendBtn.Visible = true
    title.Text = "Secret Chat"
    minimized = false
end

minimizeBtn.MouseButton1Click:Connect(function()
    if minimized then restore() else minimize() end
end)

-- If user taps anywhere on small bar, restore as well
frame.InputBegan:Connect(function(input)
    if minimized and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
        restore()
    end
end)

-- Keep minibar on-screen if viewport changes
workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function() updateSize() end)
if workspace.CurrentCamera then
    workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
        if minimized then
            -- keep compact bar near left center
            frame.Position = UDim2.new(0.02, 0, 0.5, 0)
            frame.Size = UDim2.new(0, 180, 0, 40)
        else
            updateSize()
        end
    end)
end
